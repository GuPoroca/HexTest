
package components

import "github.com/GuPoroca/HexTest/pkg/typeDefines"

/////////////////////////////////////////////////////////
// PROJECT FORM
/////////////////////////////////////////////////////////
templ EditProjectForm(project typeDefines.Project) {
	<div class="relative space-y-4">
		<!-- Top bar with Save/Add/Delete -->
		<div class="flex justify-end space-x-2">
			<button
				type="button"
				class="px-3 py-1 bg-green-600 rounded hover:bg-green-500"
				hx-post={ "/add/suite?project=" + project.Name }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Add Suite
			</button>
		</div>
		<h2 class="text-2xl font-bold">Edit Project</h2>
		<form
			class="space-y-2"
			hx-post="/save/project"
			hx-target="#main-content"
			hx-swap="innerHTML"
		>
			<label class="block">
				<span class="text-sm">Name</span>
				<input type="hidden" name="oldName" value={ project.Name }/>
				<input
					type="text"
					name="Name"
					value={ project.Name }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<label class="block">
				<span class="text-sm">URL</span>
				<input
					type="text"
					name="Url"
					value={ project.Url }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<label class="block">
				<span class="text-sm">Request Headers</span>
				<div id="headers-list" class="space-y-2">
					for k, v := range project.Project_Headers {
						<div class="flex space-x-2">
							<input
								type="text"
								name="HeaderKeys"
								value={ k }
								placeholder="Key"
								class="flex-1 p-2 bg-gray-800 rounded"
							/>
							<input
								type="text"
								name="HeaderValues"
								value={ v }
								placeholder="Value"
								class="flex-1 p-2 bg-gray-800 rounded"
							/>
						</div>
					}
				</div>
				<button
					type="button"
					class="mt-2 px-2 py-1 bg-gray-700 rounded hover:bg-gray-600"
					hx-get="/add/test/header"
					hx-target="#headers-list"
					hx-swap="beforeend"
				>
					+ Add Header
				</button>
			</label>
			<div class="flex justify-end pt-2">
				<button
					type="submit"
					class="px-3 py-1 bg-indigo-600 rounded hover:bg-indigo-500"
				>
					Save
				</button>
			</div>
		</form>
	</div>
}

/////////////////////////////////////////////////////////
// SUITE FORM
/////////////////////////////////////////////////////////
templ EditSuiteForm(suite typeDefines.Suite) {
	<div class="relative space-y-4">
		<div class="flex justify-end space-x-2">
			<button
				type="button"
				class="px-3 py-1 bg-green-600 rounded hover:bg-green-500"
				hx-post={ "/add/test?suite=" + suite.Name }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Add Test
			</button>
			<button
				type="button"
				class="px-3 py-1 bg-red-600 rounded hover:bg-red-500"
				hx-delete={ "/delete/suite?name=" + suite.Name }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Delete Suite
			</button>
		</div>
		<h2 class="text-2xl font-bold">Edit Suite</h2>
		<form
			class="space-y-2"
			hx-post="/save/suite"
			hx-target="#main-content"
			hx-swap="innerHTML"
		>
			<label class="block">
				<span class="text-sm">Name</span>
				<input type="hidden" name="oldName" value={ suite.Name }/>
				<input
					type="text"
					name="Name"
					value={ suite.Name }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<label class="block">
				<span class="text-sm">Comment</span>
				<input
					type="text"
					name="Comment"
					value={ suite.Comment }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<div class="flex justify-end pt-2">
				<button
					type="submit"
					class="px-3 py-1 bg-indigo-600 rounded hover:bg-indigo-500"
				>
					Save
				</button>
			</div>
		</form>
	</div>
}

/////////////////////////////////////////////////////////
// TEST FORM (Improved UX)
/////////////////////////////////////////////////////////
templ EditTestForm(test typeDefines.Test) {
	<div class="relative space-y-5">
		<div class="flex justify-end gap-2">
			<button
				type="button"
				class="px-3 py-1 bg-green-600 rounded hover:bg-green-500"
				hx-post={ "/add/assert?test=" + test.Name }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Add Assert
			</button>
			<button
				type="button"
				class="px-3 py-1 bg-red-600 rounded hover:bg-red-500"
				hx-delete={ "/delete/test?name=" + test.Name }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Delete Test
			</button>
		</div>
		<h2 class="text-2xl font-bold">Edit Test</h2>
		<form
			class="space-y-5"
			hx-post="/save/test"
			hx-target="#main-content"
			hx-swap="innerHTML"
		>
			<input type="hidden" name="oldName" value={ test.Name }/>
			<!-- Row 1: Name, Method, Endpoint -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-3">
				<label class="block">
					<span class="text-sm">Name</span>
					<input
						type="text"
						name="Name"
						value={ test.Name }
						class="w-full p-2 bg-gray-800 rounded"
					/>
				</label>
				<label class="block">
					<span class="text-sm">Method</span>
					{{ methods := []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"} }}
					<select
						name="Method"
						class="w-full p-2 bg-gray-800 rounded"
					>
						for _, m := range methods {
							<option value={ m } selected?={ m == test.Method }>{ m }</option>
						}
					</select>
				</label>
				<label class="block">
					<span class="text-sm">API Endpoint</span>
					<input
						type="text"
						name="Api_endpoint"
						value={ test.Api_endpoint }
						placeholder="/path"
						class="w-full p-2 bg-gray-800 rounded"
					/>
				</label>
			</div>
			<!-- Row 2: Comment -->
			<label class="block">
				<span class="text-sm">Comment</span>
				<input
					type="text"
					name="Comment"
					value={ test.Comment }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<!-- Row 3: Request Body (multiline, monospace, beautify button) -->
			<div class="block">
				<div class="flex items-center justify-between">
					<span class="text-sm">Request Body</span>
					<button
						type="button"
						class="px-2 py-1 text-sm bg-gray-700 rounded hover:bg-gray-600"
						onclick="formatJSONInTextarea('request-body')"
						title="Pretty-print JSON"
					>
						Beautify JSON
					</button>
				</div>
				<textarea
					id="request-body"
					name="Request_body"
					rows="10"
					spellcheck="false"
					wrap="off"
					class="w-full p-3 bg-gray-800 rounded font-mono resize-y leading-6"
				>{ test.Request_body }</textarea>
				<p class="text-xs text-gray-400 mt-1">
					Tip: paste raw JSON and click <em>Beautify JSON</em>. Invalid JSON will show an alert.
				</p>
			</div>
			<!-- Row 4: Headers -->
			<label class="block">
				<span class="text-sm">Request Headers</span>
				<div id="headers-list" class="space-y-2 mt-1">
					for k, v := range test.Request_Headers {
						<div class="flex gap-2">
							<input
								type="text"
								name="HeaderKeys"
								value={ k }
								placeholder="Key"
								class="flex-1 p-2 bg-gray-800 rounded"
							/>
							<input
								type="text"
								name="HeaderValues"
								value={ v }
								placeholder="Value"
								class="flex-1 p-2 bg-gray-800 rounded"
							/>
						</div>
					}
				</div>
				<button
					type="button"
					class="mt-2 px-2 py-1 bg-gray-700 rounded hover:bg-gray-600"
					hx-get="/add/test/header"
					hx-target="#headers-list"
					hx-swap="beforeend"
				>
					+ Add Header
				</button>
				<p class="text-xs text-gray-400 mt-1">Leave either field empty to remove that header on save.</p>
			</label>
			<div class="flex justify-end pt-2">
				<button
					type="submit"
					class="px-3 py-1 bg-indigo-600 rounded hover:bg-indigo-500"
				>
					Save
				</button>
			</div>
		</form>
	</div>
	<!-- Tiny helper to pretty-print JSON in the Request Body textarea -->
	<script>
	function formatJSONInTextarea(id) {
		try {
			const el = document.getElementById(id);
			if (!el) return;
			const text = el.value.trim();
			if (!text) return;
			const obj = JSON.parse(text);
			el.value = JSON.stringify(obj, null, 2);
		} catch (e) {
			alert("Invalid JSON: " + e.message);
		}
	}
	</script>
}

/////////////////////////////////////////////////////////
// ASSERT FORM
/////////////////////////////////////////////////////////
templ EditAssertForm(assert typeDefines.Assert) {
	<div class="relative space-y-4">
		<div class="flex justify-end space-x-2">
			<button
				type="button"
				class="px-3 py-1 bg-green-600 rounded hover:bg-green-500"
				hx-post={ "/add/check?assert=" + assert.Field }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Add Check
			</button>
			<button
				type="button"
				class="px-3 py-1 bg-red-600 rounded hover:bg-red-500"
				hx-delete={ "/delete/assert?field=" + assert.Field }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Delete Assert
			</button>
		</div>
		<h2 class="text-2xl font-bold">Edit Assert</h2>
		<form
			class="space-y-2"
			hx-post="/save/assert"
			hx-target="#main-content"
			hx-swap="innerHTML"
		>
			<label class="block">
				<span class="text-sm">Field</span>
				<input type="hidden" name="oldField" value={ assert.Field }/>
				<input
					type="text"
					name="Field"
					value={ assert.Field }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<div class="flex justify-end pt-2">
				<button
					type="submit"
					class="px-3 py-1 bg-indigo-600 rounded hover:bg-indigo-500"
				>
					Save
				</button>
			</div>
		</form>
	</div>
}

/////////////////////////////////////////////////////////
// CHECK FORM
/////////////////////////////////////////////////////////
templ EditCheckForm(check typeDefines.Check) {
	<div class="relative space-y-4">
		<div class="flex justify-end space-x-2">
			<button
				type="button"
				class="px-3 py-1 bg-red-600 rounded hover:bg-red-500"
				hx-delete={ "/delete/check?operand=" + check.Operand }
				hx-target="#main-content"
				hx-swap="innerHTML"
			>
				Delete Check
			</button>
		</div>
		<h2 class="text-2xl font-bold">Edit Check</h2>
		<form
			class="space-y-2"
			hx-post="/save/check"
			hx-target="#main-content"
			hx-swap="innerHTML"
		>
			<label class="block">
				<span class="text-sm">Operand</span>
				<input type="hidden" name="oldOperand" value={ check.Operand }/>
				<input
					type="text"
					name="Operand"
					value={ check.Operand }
					class="w-full p-2 bg-gray-800 rounded"
				/>
			</label>
			<label class="block">
				<span class="text-sm">Expected Values</span>
				<div id="expected-list" class="space-y-2">
					for i := range check.Expected {
						<input
							type="text"
							name="Expected"
							value={ typeDefines.StringifyMyAny(check.Expected[i]) }
							placeholder="Expected"
							class="flex-1 p-2 bg-gray-800 rounded"
						/>
					}
				</div>
				<button
					type="button"
					class="mt-2 px-2 py-1 bg-gray-700 rounded hover:bg-gray-600"
					hx-get="/add/check/expected"
					hx-target="#expected-list"
					hx-swap="beforeend"
				>
					+ Add Expected
				</button>
			</label>
			<div class="flex justify-end pt-2">
				<button
					type="submit"
					class="px-3 py-1 bg-indigo-600 rounded hover:bg-indigo-500"
				>
					Save
				</button>
			</div>
		</form>
	</div>
}
